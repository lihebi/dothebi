// General Actions

// add_hook("window_before_close_hook",
//          function () {
//              var w = get_recent_conkeror_window();
//              var result = (w == null) ||
//                  "y" == (yield w.minibuffer.read_single_character_option(
//                      $prompt = "Quit Conkeror? (y/n)",
//                      $options = ["y", "n"]));
//              yield co_return(result);
//          });

// homepage = "https://www.google.com";
// homepage = "http://lihebi.com";
homepage = "http://wiki.lihebi.com"
isearch_keep_selection = true;
isearch_scroll_center_vertically = true;

cwd = get_home_directory();
cwd = make_file("~/Downloads");

dowload_buffer_automatic_open_target = OPEN_NEW_BUFFER



// theme
// CAUTION: Require init the submodule in .hebi!

theme_load_paths.unshift("~/.hebi/conkeror/themes/");
theme_unload("default");
theme_load("conkeror-theme-zenburn");

require("new-tabs.js");




// mode line


require("mode-line.js");
// remove_hook("mode_line_hook", mode_line_adder(clock_widget));
// add_hook("mode_line_hook", mode_line_adder(buffer_icon_widget), true);
// add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);
// add_hook("mode_line_hook", mode_line_adder(buffer_count_widget), true);
// add_hook("mode_line_hook", mode_line_adder(zoom_widget));
// add_hook("mode_line_hook", mode_line_adder(downloads_status_widget));




/*******************************
* Web jumps
*******************************/

define_webjump("ratpoisonwiki", "http://ratpoison.wxcvbn.org/cgi-bin/wiki.pl?search=%s");
define_webjump("gitisu", "http://git.linux.iastate.edu");
define_webjump("wikihebi", "http://wiki.lihebi.com");
define_webjump("github", "http://github.com");
define_webjump("cymail", "http://cymail.iastate.edu")
define_webjump("blackboard", "http://bb.its.iastate.edu")
define_webjump("accessplus", "http://accessplus.iastate.edu")

/*******************************
* other
*******************************/

url_remoting_fn = load_url_in_new_buffer;

// Enable auto save session and make it load automatically at startup.

// require("session.js");
// session_auto_save_auto_load = true;

// Setup how long in days, history entries are kept before being automatically expired.
// session_pref('browser.history_expire_days', 30);

hints_display_url_panel = true;


require("adblockplus");


require('eye-guide.js');
define_key(content_buffer_normal_keymap, "space", "eye-guide-scroll-down");
define_key(content_buffer_normal_keymap, "back_space", "eye-guide-scroll-up");


/*******************************
 * Restore
 *******************************/

// I think by the time kill_buffer_hook runs the buffer is gone so I
// patch kill_buffer

var kill_buffer_original = kill_buffer_original || kill_buffer;

var killed_buffers = [];

kill_buffer = function (buffer, force) {
    if (buffer.display_uri_string) {
        killed_buffers.push({url: buffer.display_uri_string,
                             title: buffer.title,
                             history: buffer.web_navigation.sessionHistory});
    }

    kill_buffer_original(buffer,force);
};

interactive("restore-killed-buffer-url", "Loads url from a previously killed buffer",
            function restore_killed_buffer_url (I) {
                if (killed_buffers.length !== 0) {
                    var killed_buffer = yield I.minibuffer.read(
                        $prompt = "Restore killed buffer url:",
                        $completer = new all_word_completer($completions = killed_buffers,
                                                            $get_string = function (x) x.url,
                                                            $get_description = function (x) x.title),
                        $default_completion = killed_buffers[killed_buffers.length - 1],
                        $auto_complete = "url",
                        $auto_complete_initial = true,
                        $auto_complete_delay = 0,
                        $require_match = true
                    );
                    
                    load_url_in_new_buffer(killed_buffer.url);

                    var buf = I.window.buffers.current;
                    buf.web_navigation.sessionHistory = killed_buffer.history;
                    var original_index = buf.web_navigation.sessionHistory.index;
                    buf.web_navigation.gotoIndex(original_index);

                } else {
                    I.window.minibuffer.message("No killed buffer urls");
                }
            });
