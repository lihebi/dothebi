;; -*- mode: Lisp;-*-
;;; .stumpwmrc --- StumpWM Init File
(in-package :stumpwm)

;; If using multiple files, load them like this:
;; (load "~/.stumpwm.d/init.lisp")

;; https://github.com/ivoarch/.dot-org-files/blob/master/stumpwm.org

;; (in-package :stumpwm)

;; set contrib dir
;; (set-contrib-dir "~/.stumpwm.d/contrib/util")

;; disable welcome message
(setf *startup-message* nil)


;; I have to add this for each one? the info page says the *MODULE-DIR* variable is set to make all the modules avaiable,
;; but it seems the variable is unset
(stumpwm:init-load-path "~/.stumpwm.d/modules/")
;; (stumpwm:add-to-load-path "~/.stumpwm.d/modules/util/ttf-fonts")
(load-module "ttf-fonts")
(load-module "cpu")
;; The "battery" will stuck on macbook
(load-module "battery-portable")
(load-module "wifi")
(load-module "amixer")

;; configure swank
;; https://common-lisp.net/project/slime/
;; https://github.com/slime/slime

;; (load "~/.emacs.d/elpa/slime-20140420.33/swank-loader.lisp")
;; (swank-loader:init)
;; (defcommand swank () ()
;;   "Creates a swank server in the stumpwm lisp process"
;;   (setf stumpwm:*top-level-error-action* :break)
;;   (swank:create-server :port 4005
;;            :style swank:*communication-style*
;;            :dont-close t)
;; (echo-string (current-screen)
;;          "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Mode Line
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; default timeout
;; (setf *mode-line-timeout* 1)




;; smart modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

;; BG time
(defun pretty-time ()
  "Returns the date formatted as '17:19:51 Неделя, 27 Април 2014'."
  (defun stringify-dow (dow)
    (nth dow '("Monday" "Tuesday" "Wednesday" "Thurday" "Friday" "Saturday" "Sunday")))
  (defun stringify-mon (mon)
    (nth (- mon 1) '("Jan" "Feb" "March" "April"
                     "May" "Jun" "Jul" "Aug"
                     "Sep" "Oct" "Nov" "Dec")))
  (multiple-value-bind (sec min hr date mon yr dow dst-p tz)
      (get-decoded-time)
    (format NIL
            ;; "~2,'0d:~2,'0d:~2,'0d ~a, ~d ~a ~d (GMT ~@d)"
            "~2,'0d:~2,'0d:~2,'0d ~a, ~d ~a ~d"
            hr min sec
            (stringify-dow dow)
            date (stringify-mon mon)
            yr (- tz))))


;; Modeline format
(setf *screen-mode-line-format*
      (list "[^B%n^b] %W " ; groups/windows
            "^>" ; right align
            " ^7* " '(:eval (pretty-time)); date
            " %c %t" ; cpu
            ;; " %b" ; battery
            " %B" ; battery-portable
            ;; " %I" ; wifi
            ))


;; TODO
;; (define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Front-1-")
;; (define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Front-1+")
;; (define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle pulse")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setting fonts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Set the font for the message bar and input bar.
;; 1. Load module for xft fonts.
;; This load failed no matter how. The load of other modules such as "cpu" succeeded
;; (load-module "ttf-fonts")
;; 2. Set xft font.
;; (set-font (make-instance 'ttf-fonts:open-font :family "Source Code Pro" :subfamily "Regular" :size 13))

;; (set-font "-misc-courier-*-*-*--26-*-*-*-c-60-iso8859-1")
;; (set-font "6x13")

;; Finally, I can only use "XLFD" ("X Logical Font Description") fonts
;; this is done by xfontsel or xlsfonts
;; this is the biggest nick name from xlsfonts | grep x
;; (set-font "12x24")


;; (set-font (open-font "Source Code Pro"))

;; (set-font "-*-terminus-*-*-*-*-18-*-*-*-*-*-iso8859-*")

;; (set-font "-*-*-*-*-*-*-10-*-*-*-*-*-*-*")


;; this does not work because the "-*-*-*-..." format font only available for some size
;; I need to use ttf font, which I can see a xlc-truetype, as well as contrib/ttl-fonts
;; xlc-truetype should work, but I'm exetremely unfamiliar with common lisp, I don't know how to use it though.
;; ttl-fonts is a module, but it is actually not available at least in my stumpwm.
;; So now I'm going to use the specific setup for high def screen

;; (parse-integer (run-shell-command "echo $(xrdb -query | grep dpi | awk '{print $2}') | bc" t))

;; (set-font "-*-*-*-*-*-*-10-*-*-*-*-*-*-*")
;; (when (= (values
;;           (parse-integer
;;            (run-shell-command
;;             "echo $(xrdb -query | grep dpi | awk '{print $2}') | bc | tr '\n' ' '" t))) 192)
;;   (set-font "12x24")
;;   )

;; (when (= (values
;;           (parse-integer
;;            (run-shell-command
;;             "xdpyinfo | grep dimension | awk '{print $2}' | awk -F 'x' '{print $2}'"
;;             t))) 1600)
;;   (set-font "12x24")
;;   )

;; (set-font (make-instance 'ttf-fonts:open-font :family "Source Code Pro" :subfamily "Regular" :size 13))

;; Finallly I got this working!
;; Steps
;; 1. must call (xft:cache-fonts)
;; 2. you can view the (print xft:*font-dirs*), it shows the path is ~/.fonts, not ~/.fonts/TTF
;;    ("/usr/share/fonts/" "/home/hebi/.fonts/")
;;    So move font files up to the ~/.fonts
;; A combo:
;; (xft:cache-fonts)
;; (xft:get-font-families)
;; Done!

;; Some note for using REPL (slime) (sbcl)
;; load a module by (ql:quickload "xxx")

;; This is very slow, use with caution! neng bu yong jiu bu yong
;; (xft:cache-fonts)
;; (set-font (make-instance 'xft:font :family "Source Code Pro" :subfamily "Regular" :size 16))


(defun get-dpi()
  (values
   (parse-integer
    (run-shell-command
     "echo $(xrdb -query | grep dpi | awk '{print $2}') | bc | tr '\n' ' '" t))))

(defcommand hebi()()
            (echo (get-dpi))
            (echo (get-font-size)))

(defun get-font-size()
  (case (get-dpi)
    (96 12)
    (144 16)
    (otherwise 14)))

;; How I made the WenQuanYi Micro Hei ttf font (clx-truetype only recognizes ttf, not ttc):
;; input: ttc file
;; Tool: fontforge
;; Open ttc file, select one, generate font, choose truetype
;; The validation failed, but doesn't matter
(set-font
 (list
  (make-instance 'xft:font :family "WenQuanYi Micro Hei Mono" :subfamily "Regular" :size (get-font-size))
  ;; (make-instance 'xft:font :family "DejaVu Sans Mono" :subfamily "Oblique" :size 16)
  ;; (make-instance 'xft:font :family "Source Code Pro" :subfamily "Regular" :size 20)
  ;; (make-instance 'xft:font :family "cwTeXFangSong" :subfamily "Medium" :size 16)
  )
 )
;; The let version does not work!! Because "(= dpi 192) is NIL, not a number ..." ???

;; (let (dpi (values
;;           (parse-integer
;;            (run-shell-command
;;             "echo $(xrdb -query | grep dpi | awk '{print $2}') | bc | tr '\n' ' '" t))))
;;   (when (= 1 1)
;;     (set-font "12x24")
;;     )
;;   (when (= dpi 192)
;;     (set-font "12x24")
;;     (set-font "-*-*-*-*-*-*-10-*-*-*-*-*-*-*")
;;     )

;; (cond
;;  ((= dpi 192) (set-font "12x24"))))
;; (when (= 'dpi 192)
;;   (echo "xxx")
;;   )
;;   )




;; (set-font (concat "-adobe-courier-*-*-*-*-"
;;                   (run-shell-command "echo $(xrdb -query | grep dpi | awk '{print $2}') ' / 5 ' | bc" t)
;;                   "-*-*-*-*-*-*-*"))
;; (set-font "-adobe-courier-*-*-*-*-34-*-*-*-*-*-*-*")





;; (set-fg-color "white")
;; (set-bg-color "grey20")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Window format
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Group/window format
(setf *group-format* "%s [%n] %t ")
(setf *window-format* "%m%n%s%c")

;; Window gravity
;; (setf *message-window-gravity* :top-right)
;; (setf *input-window-gravity* :top-right)

;; Default border style
;; (setq *window-border-style* :thin)

;; I like 3 seconds for messages.
;; (setf *timeout-wait* 5)

;; Mouse focus by click.
(setf *mouse-focus-policy* :click)
;; Create groups
(setf (group-name (first (screen-groups (current-screen)))) "Default")
(gnewbg-float "Float")

;; Shell program used by run-shell-command
;; (setq *shell-program* (stumpwm::getenv "SHELL"))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Commands
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; run-or-raise - emacs
;; run-or-raise - conkeror
;; run-or-raise - urxvt/screen
;; show dropbox status
;; toggle on=|=off modeline

(defcommand emacs-with-server () ()
            "run-or-raise emacs"
            (run-or-raise "emacsclient -ca emacs" '(:class "Emacs")))
(define-key *root-map* (kbd "e") "emacs-with-server")
(define-key *root-map* (kbd "C-e") "emacs-with-server")

(defcommand browser () ()
            "run or raise conkeror"
            (run-or-raise "conkeror" '(:class "Conkeror")))
(define-key *root-map* (kbd "w") "browser")

(defcommand terminal () ()
            "run or raise urxvt"
            (run-or-raise "urxvt -e tmux" '(:class "URxvt")))
(define-key *root-map* (kbd "c") "terminal")

(defcommand xselyank () ()
            "Paste X Sel not using shift-insert"
            ;; (echo "what?")
            (window-send-string (get-x-selection)))

(define-key *root-map* (kbd "y") "xselyank")



;; :STRING will function incorrect when used NOT interactively
;;    where it only get the first word
(defcommand dict (word) ((:REST "Look Up: "))
            (echo (concat "looking up .." word))
            ;; if starting with xdm, stumpwm will not have the $PATH variable set up! Thus the full path to "trans" program needs to be specified
            (echo (run-shell-command (concat "/home/hebi/bin/trans -b :zh " word) t)))

(defcommand dict-xsel () ()
            (let ((word (get-x-selection)))
              (dict word)))

(define-key *root-map* (kbd "d") "dict-xsel")

;; TODO the file will be reset to root, and max brightness
(defcommand inc-brightness () ()
            "Increase brightness by 100"
            ;; /sys/class/backlight/intel_backlight/brightness
            (let ((brightness-file "/sys/class/backlight/intel_backlight/brightness"))
              ;; get current brightness
              (let ((cur-val
                     (values (parse-integer (run-shell-command (concat "cat " brightness-file) t)))))
                ;; add 100 to it
                (setq cur-val (+ cur-val 100))
                ;; (echo cur-val)
                (echo (concat "echo " (write-to-string cur-val) " > " brightness-file))
                (run-shell-command (concat "echo " (write-to-string cur-val) " > " brightness-file))
                )
              )
            )


(defcommand dec-brightness () ()
            "Decrease brightness by 100"
            ;; /sys/class/backlight/intel_backlight/brightness
            (let ((brightness-file "/sys/class/backlight/intel_backlight/brightness"))
              ;; get current brightness
              (let ((cur-val
                     (values (parse-integer (run-shell-command (concat "cat " brightness-file) t)))))
                ;; add 100 to it
                (setq cur-val (- cur-val 100))
                ;; (echo cur-val)
                (echo (concat "echo " (write-to-string cur-val) " > " brightness-file))
                (run-shell-command (concat "echo " (write-to-string cur-val) " > " brightness-file))
                )
              )
            )

(define-key *root-map* (kbd "b") "inc-brightness")
(define-key *root-map* (kbd "C-b") "dec-brightness")

(defcommand chown-brightness () ()
            (let ((brightness-file "/sys/class/backlight/intel_backlight/brightness"))
              (set-x-selection (concat "chown hebi:hebi " brightness-file))))


;; (defcommand dropbox-status () ()
;;   (run-shell-command "dropbox status"))

;; (defcommand mode-line-toggle () ()
;;   "Toggles the mode-line"
;;   (toggle-mode-line (current-screen) (current-head)))
;; (define-key *top-map* (kbd "M-m") "mode-line-toggle")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Key bindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-key *root-map* (kbd "o") "only")
;; (define-key *root-map* (kbd "z") "windows")

;; (define-key *root-map* (kbd "C-Up") "move-window up")
;; (define-key *root-map* (kbd "C-Left") "move-window left")
;; (define-key *root-map* (kbd "C-Down") "move-window down")
;; (define-key *root-map* (kbd "C-Right") "move-window right")

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-z") "echo Zzzzz...")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (terminal)
;; (browser)
